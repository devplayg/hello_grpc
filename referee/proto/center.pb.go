// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/center.proto

package referee

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Judgment struct {
	Team                 string   `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty"`
	Score                float32  `protobuf:"fixed32,2,opt,name=score,proto3" json:"score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Judgment) Reset()         { *m = Judgment{} }
func (m *Judgment) String() string { return proto.CompactTextString(m) }
func (*Judgment) ProtoMessage()    {}
func (*Judgment) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4acfdbf4d8b001b, []int{0}
}

func (m *Judgment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Judgment.Unmarshal(m, b)
}
func (m *Judgment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Judgment.Marshal(b, m, deterministic)
}
func (m *Judgment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Judgment.Merge(m, src)
}
func (m *Judgment) XXX_Size() int {
	return xxx_messageInfo_Judgment.Size(m)
}
func (m *Judgment) XXX_DiscardUnknown() {
	xxx_messageInfo_Judgment.DiscardUnknown(m)
}

var xxx_messageInfo_Judgment proto.InternalMessageInfo

func (m *Judgment) GetTeam() string {
	if m != nil {
		return m.Team
	}
	return ""
}

func (m *Judgment) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func init() {
	proto.RegisterType((*Judgment)(nil), "referee.Judgment")
}

func init() {
	proto.RegisterFile("proto/center.proto", fileDescriptor_b4acfdbf4d8b001b)
}

var fileDescriptor_b4acfdbf4d8b001b = []byte{
	// 138 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0x4e, 0xcd, 0x2b, 0x49, 0x2d, 0xd2, 0x03, 0x73, 0x84, 0xd8, 0x8b, 0x52, 0xd3,
	0x52, 0x8b, 0x52, 0x53, 0x95, 0x4c, 0xb8, 0x38, 0xbc, 0x4a, 0x53, 0xd2, 0x73, 0x53, 0xf3, 0x4a,
	0x84, 0x84, 0xb8, 0x58, 0x4a, 0x52, 0x13, 0x73, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0,
	0x6c, 0x21, 0x11, 0x2e, 0xd6, 0xe2, 0xe4, 0xfc, 0xa2, 0x54, 0x09, 0x26, 0x05, 0x46, 0x0d, 0xa6,
	0x20, 0x08, 0xc7, 0xc8, 0x91, 0x8b, 0x3d, 0x08, 0x62, 0x80, 0x90, 0x19, 0x17, 0x47, 0x70, 0x46,
	0x7e, 0x69, 0x89, 0x7f, 0x69, 0x89, 0x90, 0xa0, 0x1e, 0xd4, 0x58, 0x3d, 0x98, 0x99, 0x52, 0x98,
	0x42, 0x4a, 0x0c, 0x1a, 0x8c, 0x06, 0x8c, 0x49, 0x6c, 0x60, 0x87, 0x18, 0x03, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x5e, 0xe9, 0xbc, 0x9e, 0x9e, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RefereeClient is the client API for Referee service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RefereeClient interface {
	ShoutOut(ctx context.Context, opts ...grpc.CallOption) (Referee_ShoutOutClient, error)
}

type refereeClient struct {
	cc grpc.ClientConnInterface
}

func NewRefereeClient(cc grpc.ClientConnInterface) RefereeClient {
	return &refereeClient{cc}
}

func (c *refereeClient) ShoutOut(ctx context.Context, opts ...grpc.CallOption) (Referee_ShoutOutClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Referee_serviceDesc.Streams[0], "/referee.Referee/ShoutOut", opts...)
	if err != nil {
		return nil, err
	}
	x := &refereeShoutOutClient{stream}
	return x, nil
}

type Referee_ShoutOutClient interface {
	Send(*Judgment) error
	Recv() (*Judgment, error)
	grpc.ClientStream
}

type refereeShoutOutClient struct {
	grpc.ClientStream
}

func (x *refereeShoutOutClient) Send(m *Judgment) error {
	return x.ClientStream.SendMsg(m)
}

func (x *refereeShoutOutClient) Recv() (*Judgment, error) {
	m := new(Judgment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RefereeServer is the server API for Referee service.
type RefereeServer interface {
	ShoutOut(Referee_ShoutOutServer) error
}

// UnimplementedRefereeServer can be embedded to have forward compatible implementations.
type UnimplementedRefereeServer struct {
}

func (*UnimplementedRefereeServer) ShoutOut(srv Referee_ShoutOutServer) error {
	return status.Errorf(codes.Unimplemented, "method ShoutOut not implemented")
}

func RegisterRefereeServer(s *grpc.Server, srv RefereeServer) {
	s.RegisterService(&_Referee_serviceDesc, srv)
}

func _Referee_ShoutOut_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RefereeServer).ShoutOut(&refereeShoutOutServer{stream})
}

type Referee_ShoutOutServer interface {
	Send(*Judgment) error
	Recv() (*Judgment, error)
	grpc.ServerStream
}

type refereeShoutOutServer struct {
	grpc.ServerStream
}

func (x *refereeShoutOutServer) Send(m *Judgment) error {
	return x.ServerStream.SendMsg(m)
}

func (x *refereeShoutOutServer) Recv() (*Judgment, error) {
	m := new(Judgment)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Referee_serviceDesc = grpc.ServiceDesc{
	ServiceName: "referee.Referee",
	HandlerType: (*RefereeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShoutOut",
			Handler:       _Referee_ShoutOut_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/center.proto",
}
